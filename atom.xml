<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>百度一下jms的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-23T04:43:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>百度一下jms</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP学习笔记（1）—基础</title>
    <link href="http://yoursite.com/2016/05/23/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/05/23/PHP学习笔记——基础/</id>
    <published>2016-05-23T03:52:29.000Z</published>
    <updated>2016-05-23T04:43:42.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;努力学习，天天向上！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;echo-和-print&quot;&gt;&lt;a href=&quot;#echo-和-print&quot; class=&quot;headerlink&quot; title=&quot;echo 和 print&quot;&gt;&lt;/a&gt;echo 和 print&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;echo: 能够输出一个以上的字符串；&lt;/li&gt;
&lt;li&gt;print: 只能输出一个字符串，并始终返回1&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$txt1 = &lt;span class=&quot;string&quot;&gt;&quot;Learn php&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$txt2 = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Volvo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;BMW&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;SAAB&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;($txt1);	&lt;span class=&quot;comment&quot;&gt;// Learn php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;my car is &amp;#123;$txt2[1]&amp;#125;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;// my car is BMW&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;my &quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;car &quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;is &quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;BMW&quot;&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// my car is BMW&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;my car is &amp;#123;$txt2[0]&amp;#125;&quot;&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// my car is Volvo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// print &quot;my car is &amp;#123;$txt2[2]&amp;lt;br&amp;gt;&amp;#125;&quot;; // 注意字符串中能包含 HTML 标记,如&amp;lt;br&amp;gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// print(&quot;Hello&quot;, &quot;world&quot;); 	// print 只能输出一个字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;var-dump&quot;&gt;&lt;a href=&quot;#var-dump&quot; class=&quot;headerlink&quot; title=&quot;var_dump()&quot;&gt;&lt;/a&gt;var_dump()&lt;/h4&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;-444&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// 整型 int(-444)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;4.456&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;// 浮点类型 float(4.456)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;0x34&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// 十六进制 int(52) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;076&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// 八进制 int(62)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;2.4e-3&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;// float(0.0024)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($txt2);	&lt;span class=&quot;comment&quot;&gt;// 数组 array(3) &amp;#123; [0]=&amp;gt; string(5) &quot;Volvo&quot; [1]=&amp;gt; string(3) &quot;BMW&quot; [2]=&amp;gt; string(4) &quot;SAAB&quot; &amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($null);	&lt;span class=&quot;comment&quot;&gt;// NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;字符串长度：&quot;&lt;/span&gt;, strlen(&lt;span class=&quot;string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 文本检索&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;文本检索：&quot;&lt;/span&gt;, strpos(&lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;文本检索：&quot;&lt;/span&gt;, strpos(&lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;III&quot;&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;define&quot;&gt;&lt;a href=&quot;#define&quot; class=&quot;headerlink&quot; title=&quot;define()&quot;&gt;&lt;/a&gt;define()&lt;/h4&gt;&lt;p&gt;常量：常量用define()定义，且一旦被定义就无法更改或者撤销定义。常量以字符或者下划线开头（常量名称前面没有$符号）。类似OC中的宏。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&quot;BGCOLOR&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;BGCOLOR: &quot;&lt;/span&gt;,BGCOLOR;	&lt;span class=&quot;comment&quot;&gt;// BGCOLOR: green&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符串运算符&quot;&gt;&lt;a href=&quot;#字符串运算符&quot; class=&quot;headerlink&quot; title=&quot;字符串运算符&quot;&gt;&lt;/a&gt;字符串运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;. 串接&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$one = &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$two = $one.&lt;span class=&quot;string&quot;&gt;&quot; world&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;($two);		&lt;span class=&quot;comment&quot;&gt;// Hello world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.= 串接赋值&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$one .= &lt;span class=&quot;string&quot;&gt;&quot; world&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;($one);  	&lt;span class=&quot;comment&quot;&gt;// Hello world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;递增&quot;&gt;&lt;a href=&quot;#递增&quot; class=&quot;headerlink&quot; title=&quot;递增&quot;&gt;&lt;/a&gt;递增&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;++$x:     先递增，后返回;  &lt;/li&gt;
&lt;li&gt;$x++:      先返回，后递增;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$x = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; ++$x;		&lt;span class=&quot;comment&quot;&gt;// 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$y = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $y++;		&lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;比较运算符&quot;&gt;&lt;a href=&quot;#比较运算符&quot; class=&quot;headerlink&quot; title=&quot;比较运算符&quot;&gt;&lt;/a&gt;比较运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;==： 等于（如果$x等于$y,则返回true）        &lt;/li&gt;
&lt;li&gt;===：全等（如果 $x 等于 $y，且它们类型相同，则返回 true。）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$p = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$q = &lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($p == $q);		&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $p === $q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($p === $q);	&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;逻辑运算符&quot;&gt;&lt;a href=&quot;#逻辑运算符&quot; class=&quot;headerlink&quot; title=&quot;逻辑运算符&quot;&gt;&lt;/a&gt;逻辑运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;xor: 异或（如果 $x 和 $y 有且仅有一个为 true，则返回 true。）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var_dump(&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;&amp;gt;&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;数组运算符&quot;&gt;&lt;a href=&quot;#数组运算符&quot; class=&quot;headerlink&quot; title=&quot;数组运算符&quot;&gt;&lt;/a&gt;数组运算符&lt;/h4&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$array_1 = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$array_2 = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;yellow&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$array_3 = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;yellow&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$array_4 = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;yellow&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// key被覆盖，但value值不会呗覆盖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($array_1 + $array_2);	&lt;span class=&quot;comment&quot;&gt;// array(3) &amp;#123; [&quot;a&quot;]=&amp;gt; string(3) &quot;red&quot; [&quot;b&quot;]=&amp;gt; string(5) &quot;green&quot; [&quot;d&quot;]=&amp;gt; string(4) &quot;blue&quot; &amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果 $x 和 $y 拥有相同的键/值对，则返回 true。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($array_1 == $array_3);	&lt;span class=&quot;comment&quot;&gt;// bool(false) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($array_2 == $array_3);	&lt;span class=&quot;comment&quot;&gt;// bool(true) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果 $x 和 $y 拥有相同的键/值对，且顺序相同类型相同，则返回 true。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($array_3 === $array_4);  &lt;span class=&quot;comment&quot;&gt;// bool(false)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($array_3 === $array_2);  &lt;span class=&quot;comment&quot;&gt;// // bool(true) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;努力学习，天天向上！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;echo-和-print&quot;&gt;&lt;a href=&quot;#echo-和-print&quot; class=&quot;headerlink&quot; title=&quot;echo 和 print&quot;&gt;&lt;/a&gt;echo 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端数据库Realm</title>
    <link href="http://yoursite.com/2016/05/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93Realm/"/>
    <id>http://yoursite.com/2016/05/17/移动端数据库Realm/</id>
    <published>2016-05-17T06:57:20.000Z</published>
    <updated>2016-05-17T07:05:19.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://realm.io/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;是一个跨平台移动数据库引擎，支持iOS、OS X（Objective-C和Swift）以及Android。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标是取代SQLite。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xoz39.com1.z0.glb.clouddn.com/zzRealm.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://realm.io/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;是一个跨平台移动数据库引擎，支持iOS、OS X（Objective-C和Swift）以及Android。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TypeEncodings</title>
    <link href="http://yoursite.com/2016/05/17/TypeEncodings/"/>
    <id>http://yoursite.com/2016/05/17/TypeEncodings/</id>
    <published>2016-05-17T04:48:59.000Z</published>
    <updated>2016-05-17T04:49:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Type_Encodings是运行时系统的辅助工具。编译器将函数返回值、参数类型以及实现编译成特定的字符。例如：&lt;code&gt;v@:&lt;/code&gt;表示：参数类型为静态类型或者id类型，无返回值的一个方法实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;encode&quot;&gt;&lt;a href=&quot;#encode&quot; class=&quot;headerlink&quot; title=&quot;@encode()&quot;&gt;&lt;/a&gt;@encode()&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;char *buf1 = @encode(void);     // buf1 = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *buf2 = @encode(float);    // buf2 = f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *buf3 = @encode(NSArray);  // buf3 = &amp;#123;NSArray=#&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Objective-C-type-encodings&quot;&gt;&lt;a href=&quot;#Objective-C-type-encodings&quot; class=&quot;headerlink&quot; title=&quot;Objective-C type encodings&quot;&gt;&lt;/a&gt;Objective-C type encodings&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Code&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;c&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A char&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;i&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;s&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;l&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;q&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A long long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;c&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unsigned char&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unsigned int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unsigned short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unsigned long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Q&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unsigned long long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;f&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;d&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A C++ bool or a C99 _Bool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;v&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A character string (char *)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An object (whether statically typed or typed id)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;#&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A class object (Class)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;:&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A method selector (SEL)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[array type]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An array&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Code&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{name=type…}&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A structure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(name=type…)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A union&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bnum&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A bit field of num bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;^type&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A pointer to type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;?&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;An unknown type (among other things, this code is used for function pointers)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;r&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;const&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;inout&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;o&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;O&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bycopy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;R&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;byref&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;oneway&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;**OC不支持&lt;code&gt;long double&lt;/code&gt;类型的编码。 &lt;code&gt;@encode(long double)&lt;/code&gt;返回值是d, 与&lt;code&gt;@encode(double)&lt;/code&gt;编码结果一样&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Type_Encodings是运行时系统的辅助工具。编译器将函数返回值、参数类型以及实现编译成特定的字符。例如：&lt;code&gt;v@:&lt;/code&gt;表示：参数类型为静态类型或者id类型，无返回值的一个方法实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift中protocol的三种实现以及mutating关键词</title>
    <link href="http://yoursite.com/2016/05/11/Swift%E4%B8%ADprotocol%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8Amutating%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
    <id>http://yoursite.com/2016/05/11/Swift中protocol的三种实现以及mutating关键词/</id>
    <published>2016-05-11T09:12:21.000Z</published>
    <updated>2016-05-11T09:35:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Swift中&lt;code&gt;protocol&lt;/code&gt;除了可以被&lt;code&gt;class&lt;/code&gt;实现外，也可以被&lt;code&gt;struct&lt;/code&gt;和&lt;code&gt;enum&lt;/code&gt;实现。而&lt;code&gt;mutating&lt;/code&gt;关键词则出现在当你用&lt;code&gt;struct&lt;/code&gt;或者&lt;code&gt;enum&lt;/code&gt;来实现协议并且在协议方法中修改变量的值得时候，用&lt;code&gt;mutating&lt;/code&gt;来修饰协议方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;首先，定义一个protocol&quot;&gt;&lt;a href=&quot;#首先，定义一个protocol&quot; class=&quot;headerlink&quot; title=&quot;首先，定义一个protocol&quot;&gt;&lt;/a&gt;首先，定义一个protocol&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VehicleProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// 改变颜色(假定changeColor()方法要改变 color 的值，则需要用 mutating 关键词修饰)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;结构体实现协议&quot;&gt;&lt;a href=&quot;#结构体实现协议&quot; class=&quot;headerlink&quot; title=&quot;结构体实现协议&quot;&gt;&lt;/a&gt;结构体实现协议&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结构体实现协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StructProtocol&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;VehicleProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.blueColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此处需要 mutating 关键词修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.redColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;类实现协议&quot;&gt;&lt;a href=&quot;#类实现协议&quot; class=&quot;headerlink&quot; title=&quot;类实现协议&quot;&gt;&lt;/a&gt;类实现协议&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 类实现协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassProtocol&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;VehicleProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.blueColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此处 不需要使用 mutating 关键词来修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.greenColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;枚举实现协议&quot;&gt;&lt;a href=&quot;#枚举实现协议&quot; class=&quot;headerlink&quot; title=&quot;枚举实现协议&quot;&gt;&lt;/a&gt;枚举实现协议&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 枚举实现协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EnumProtocol&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;VehicleProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.blueColor()):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.blueColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.redColor()):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.purpleColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.whiteColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .first(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = .first(newValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此处需要 mutating 关键词修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.blueColor()):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = .first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.redColor())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = .first(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.whiteColor())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/Protocol_mutating.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文代码链接：https://github.com/zhangzhaopds/Protocol_mutating.git&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Swift中&lt;code&gt;protocol&lt;/code&gt;除了可以被&lt;code&gt;class&lt;/code&gt;实现外，也可以被&lt;code&gt;struct&lt;/code&gt;和&lt;code&gt;enum&lt;/code&gt;实现。而&lt;code&gt;mutating&lt;/code&gt;关键词则
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大牛们的博客集</title>
    <link href="http://yoursite.com/2016/05/06/%E5%A4%A7%E7%89%9B%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%9B%86/"/>
    <id>http://yoursite.com/2016/05/06/大牛们的博客集/</id>
    <published>2016-05-06T03:40:28.000Z</published>
    <updated>2016-05-06T06:38:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;活到老，学到老，学无止境！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Github备忘录&quot;&gt;&lt;a href=&quot;#Github备忘录&quot; class=&quot;headerlink&quot; title=&quot;Github备忘录&quot;&gt;&lt;/a&gt;Github备忘录&lt;/h3&gt;&lt;p&gt;一个涵盖了iOS开发各个方面知识的github链接集合，整体来说比较全面：&lt;a href=&quot;http://github.ibireme.com/github/list/ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://github.ibireme.com/github/list/ios/&lt;/a&gt;，来自于于YYKit的博客&lt;/p&gt;
&lt;h3 id=&quot;Blogs备忘录&quot;&gt;&lt;a href=&quot;#Blogs备忘录&quot; class=&quot;headerlink&quot; title=&quot;Blogs备忘录&quot;&gt;&lt;/a&gt;Blogs备忘录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;唐巧的技术博客     &lt;a href=&quot;http://blog.devtang.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.devtang.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YYKit &lt;a href=&quot;http://blog.ibireme.com/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.ibireme.com/about/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OneV’s Den     &lt;a href=&quot;http://onevcat.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://onevcat.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;破船之家     &lt;a href=&quot;http://beyondvincent.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://beyondvincent.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSHipster     &lt;a href=&quot;http://nshipster.cn/feed.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nshipster.cn/feed.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limboy 无网不剩     &lt;a href=&quot;http://feeds.feedburner.com/lzyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://feeds.feedburner.com/lzyy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lex iOS notes     &lt;a href=&quot;http://ios.lextang.com/rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ios.lextang.com/rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;念茜的博客     &lt;a href=&quot;http://nianxi.net/feed.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nianxi.net/feed.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xcode Dev     &lt;a href=&quot;http://blog.xcodev.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.xcodev.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ted’s Homepage     &lt;a href=&quot;http://wufawei.com/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wufawei.com/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;txx’s blog     &lt;a href=&quot;http://blog.t-xx.me/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.t-xx.me/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KEVIN BLOG     &lt;a href=&quot;http://imkevin.me/rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://imkevin.me/rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阿毛的蛋疼地     &lt;a href=&quot;http://www.xiangwangfeng.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.xiangwangfeng.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;亚庆的 Blog     &lt;a href=&quot;http://billwang1990.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://billwang1990.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nonomori     &lt;a href=&quot;http://nonomori.farbox.com/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nonomori.farbox.com/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;言无不尽     &lt;a href=&quot;http://tang3w.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tang3w.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wonderffee’s Blog     &lt;a href=&quot;http://wonderffee.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wonderffee.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m TualatriX     &lt;a href=&quot;http://imtx.me/feed/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://imtx.me/feed/latest/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vclwei     &lt;a href=&quot;http://vclwei.com/posts.rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vclwei.com/posts.rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cocoabit     &lt;a href=&quot;http://blog.cocoabit.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.cocoabit.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nixzhu on scriptogr.am     &lt;a href=&quot;http://nixzhu.me/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nixzhu.me/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不会开机的男孩     &lt;a href=&quot;http://studentdeng.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://studentdeng.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nico     &lt;a href=&quot;http://www.taofengping.com/rss.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.taofengping.com/rss.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阿峰的技术窝窝     &lt;a href=&quot;http://hufeng825.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hufeng825.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;answer_huang     &lt;a href=&quot;http://answerhuang.duapp.com/index.php/feed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://answerhuang.duapp.com/index.php/feed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webfrogs     &lt;a href=&quot;http://webfrogs.me/feed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webfrogs.me/feed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码手工艺人     &lt;a href=&quot;http://joeyio.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://joeyio.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lancy’s Blog     &lt;a href=&quot;http://gracelancy.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gracelancy.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m Allen     &lt;a href=&quot;http://www.imallen.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.imallen.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Travis’ Blog     &lt;a href=&quot;http://imi.im/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://imi.im/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;王中周的技术博客     &lt;a href=&quot;http://wangzz.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wangzz.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;会写代码的猪     &lt;a href=&quot;http://gaosboy.com/feed/atom/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gaosboy.com/feed/atom/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;克伟的博客     &lt;a href=&quot;http://feed.cnblogs.com/blog/u/23857/rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://feed.cnblogs.com/blog/u/23857/rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;摇滚诗人     &lt;a href=&quot;http://feed.cnblogs.com/blog/u/35410/rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://feed.cnblogs.com/blog/u/35410/rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Luke’s Homepage     &lt;a href=&quot;http://geeklu.com/feed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://geeklu.com/feed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;萧宸宇     &lt;a href=&quot;http://iiiyu.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://iiiyu.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yuan博客     &lt;a href=&quot;http://www.heyuan110.com/?feed=rss2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.heyuan110.com/?feed=rss2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shining IO     &lt;a href=&quot;http://shiningio.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://shiningio.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YIFEIYANG—易飞扬的博客     &lt;a href=&quot;http://www.yifeiyang.net/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.yifeiyang.net/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KooFrank’s Blog     &lt;a href=&quot;http://koofrank.com/rss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://koofrank.com/rss&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hello it works     &lt;a href=&quot;http://helloitworks.com/feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://helloitworks.com/feed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;码农人生     &lt;a href=&quot;http://msching.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msching.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;玉令天下的Blog     &lt;a href=&quot;http://yulingtianxia.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yulingtianxia.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不掏蜂窝的熊     &lt;a href=&quot;http://www.hotobear.com/?feed=rss2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hotobear.com/?feed=rss2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;猫·仁波切     &lt;a href=&quot;https://andelf.github.io/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://andelf.github.io/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;煲仔饭     &lt;a href=&quot;http://ivoryxiong.org/feed.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ivoryxiong.org/feed.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;里脊串的开发随笔     &lt;a href=&quot;http://adad184.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://adad184.com/atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标哥的技术博客&lt;a href=&quot;http://www.henishuo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.henishuo.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;活到老，学到老，学无止境！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Github备忘录&quot;&gt;&lt;a href=&quot;#Github备忘录&quot; class=&quot;headerlink&quot; title=&quot;Github备忘录&quot;&gt;&lt;/a&gt;Github备忘录&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Mac上搭建HLS视频直播</title>
    <link href="http://yoursite.com/2016/05/05/%E5%9C%A8Mac%E4%B8%8A%E6%90%AD%E5%BB%BAHLS%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/"/>
    <id>http://yoursite.com/2016/05/05/在Mac上搭建HLS视频直播/</id>
    <published>2016-05-05T01:59:16.000Z</published>
    <updated>2016-05-05T03:10:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;HTTP Live Streaming(HLS)， 是苹果公司推出的视频直播协议，具体的内容可以到苹果开发者后台查看相关文档。简单地讲，就是将实时直播的视频，切割成大小基本相等的&lt;code&gt;.ts&lt;/code&gt; 文件和一个索引文件&lt;code&gt;prog_index.m3u8&lt;/code&gt;,然后通过索引文件来在web或者app中实现直播效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;目标-思路&quot;&gt;&lt;a href=&quot;#目标-思路&quot; class=&quot;headerlink&quot; title=&quot;目标/思路&quot;&gt;&lt;/a&gt;目标/思路&lt;/h3&gt;&lt;p&gt;本文目标：利用HLS技术，模拟一个视频直播平台。具体包括以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;VLC&lt;/code&gt;模拟一个直播视频的输入源；&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;mediastreamsegmenter&lt;/code&gt;将捕捉到的输入源视频切割成 .m3u8 格式文件；&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;Apache&lt;/code&gt;搭建本地服务器，在Safari中打开localhost，实现直播效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具体实现&quot;&gt;&lt;/a&gt;具体实现&lt;/h3&gt;&lt;h5 id=&quot;VLC-多媒体播放器&quot;&gt;&lt;a href=&quot;#VLC-多媒体播放器&quot; class=&quot;headerlink&quot; title=&quot;VLC: 多媒体播放器&quot;&gt;&lt;/a&gt;VLC: 多媒体播放器&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接在百度上输入VLC，搜索下载安装Mac版的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置VLC: 打开VLC —&amp;gt; Open media —&amp;gt; Browse选择视频输入源，即将要用来以直播的形式展现出来的视频；然后勾选 Streaming/Saving,点击Setting,进行设置；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xoz39.com1.z0.glb.clouddn.com/zzVLC01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xoz39.com1.z0.glb.clouddn.com/zzVLC02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，Address是当前Mac的ip地址，Port自定义。这个地址是输入源视频的地址，在切割视频的时候会用到这个地址。配置完成之后，点击ok, 然后如果你的视频很短，就不要着急点击open。&lt;/p&gt;
&lt;h5 id=&quot;启动Apache本地服务器&quot;&gt;&lt;a href=&quot;#启动Apache本地服务器&quot; class=&quot;headerlink&quot; title=&quot;启动Apache本地服务器&quot;&gt;&lt;/a&gt;启动Apache本地服务器&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开Mac终端，执行指令 &lt;code&gt;sudo apachectl start&lt;/code&gt;, 在浏览器中打开 localhost，如果出现 &lt;code&gt;It works&lt;/code&gt;，则说明Apache打开成功；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在路径 &lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt;下建立文件新文件，我建的是 Games；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在路径 &lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt;下新建一个文件名为index.html文件，html里的内容为：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;　　　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meda&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=320;initial-scale=1.0;maximum-scale=1.0;user-scalable=0;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Games/prog_index.m3u8&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;autoplay&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;mediastreamsegmenter切割视频&quot;&gt;&lt;a href=&quot;#mediastreamsegmenter切割视频&quot; class=&quot;headerlink&quot; title=&quot;mediastreamsegmenter切割视频&quot;&gt;&lt;/a&gt;mediastreamsegmenter切割视频&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;这个是苹果公司提供的视频切割工具，可以在&lt;a href=&quot;https://developer.apple.com/streaming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/streaming/&lt;/a&gt;进行下载，需要开发者账号登陆；&lt;/li&gt;
&lt;li&gt;在终端运行&lt;code&gt;mediastreamsegmenter -s 20 -D -f /Library/WebServer/Documents/Games 192.168.1.113:1234&lt;/code&gt;, 同时将运行VLC,即点击VLC中的Open。&lt;/li&gt;
&lt;li&gt;在Safari中打开localhost, 刚开始出现的是一个含有错误字样的播放控制条，稍等一会，直播就开始了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：VLC，mediastreamsegmenter，和Apache，在同一时间段，都要处于开启状态才可以在浏览器中看到直播效果。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;参考文档：&quot;&gt;&lt;a href=&quot;#参考文档：&quot; class=&quot;headerlink&quot; title=&quot;参考文档：&quot;&gt;&lt;/a&gt;参考文档：&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2224/_index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/technotes/tn2224/_index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/Introduction/Introduction.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTTP Live Streaming(HLS)， 是苹果公司推出的视频直播协议，具体的内容可以到苹果开发者后台查看相关文档。简单地讲，就是将实时直播的视频，切割成大小基本相等的&lt;code&gt;.ts&lt;/code&gt; 文件和一个索引文件&lt;code&gt;pro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac上使用Apache搭建服务器</title>
    <link href="http://yoursite.com/2016/05/04/Mac%E4%B8%8A%E4%BD%BF%E7%94%A8Apache%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2016/05/04/Mac上使用Apache搭建服务器/</id>
    <published>2016-05-04T08:08:24.000Z</published>
    <updated>2016-05-04T08:55:20.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本来是要搞HLS(苹果的视频直播处理技术)的，而且已经将mp4文件分割成m3u8类型直播文件，最后要验证m3u8文件的时候，却发现是要利用服务器来处理的，所以只好查了些服务器的知识。因为Mac自带Apache，所以为了省事就直接学习了下就拿来用了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;启用Apache&quot;&gt;&lt;a href=&quot;#启用Apache&quot; class=&quot;headerlink&quot; title=&quot;启用Apache&quot;&gt;&lt;/a&gt;启用Apache&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;开启apache命令：sudo apachectl start&lt;/li&gt;
&lt;li&gt;关闭apache命令：sudo apachectl stop&lt;/li&gt;
&lt;li&gt;重启apache命令：sudo apachectl restart&lt;/li&gt;
&lt;li&gt;开启apache后，可以直接在浏览器中访问 localhost, 如果出现“It works”，表示运行正常。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;具体使用：&quot;&gt;&lt;a href=&quot;#具体使用：&quot; class=&quot;headerlink&quot; title=&quot;具体使用：&quot;&gt;&lt;/a&gt;具体使用：&lt;/h4&gt;&lt;p&gt;目标：在浏览器中打开localhost，显示自定义的web页面。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Mac的Finder中，利用前往文件夹，进入路径&lt;code&gt;/Library/WebServer/Documents&lt;/code&gt;，这是默认的根路径，里面有三个文件：index.html.en, PoweredByMacOSX.gif, PoweredByMacOSXLarge.gif。这三个文件不用管，放在那里就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用Coda，或者eclipse创建一个html文件，内容自己定义就行。然后将这个html文件名字改为index.html, 只能是这个名字，除非你利用vim更改Apache的httpd.conf文件，重新配置首页文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将创建的index.html文件保存到 &lt;code&gt;/Library/WebServer/Documents&lt;/code&gt;下。因为这是个私有文件夹，是需要root权限的，所有每次更改这个文件夹都是需要输入Mac密码的，除非Mac没有设定密码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，浏览器中打开localhost,就可以看到自定义的html。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当然，也可以利用Xcode创建一个工程，利用UIWebView进行验证。只需要将 localhost 换成 Mac当前连接的网络的IP就行, URL最好是：&lt;a href=&quot;http://192.168.1.103，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.1.103，&lt;/a&gt; 也可以是：&lt;a href=&quot;http://localhost。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost。&lt;/a&gt;  具体可看以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIWebView *web = [[UIWebView alloc] initWithFrame:[UIScreen mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [web setScalesPageToFit:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.view addSubview:web];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [web loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&amp;quot;http://192.168.1.103&amp;quot;]]];	// 192.168.1.103 换成你的ip地址就行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本来是要搞HLS(苹果的视频直播处理技术)的，而且已经将mp4文件分割成m3u8类型直播文件，最后要验证m3u8文件的时候，却发现是要利用服务器来处理的，所以只好查了些服务器的知识。因为Mac自带Apache，所以为了省事就直接学习了下就拿来用了。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="http://yoursite.com/2016/05/03/Cookie/"/>
    <id>http://yoursite.com/2016/05/03/Cookie/</id>
    <published>2016-05-03T08:15:58.000Z</published>
    <updated>2016-05-03T08:27:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;许多网站登录了一次之后，下次就不需要再次登录。这种操作很常见，然而网页与程序的逻辑是完全的不同，也就是说网页并不像程序那样拥有自己的存储路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web端基本都是使用HTTP/HTTPS协议传输数据的。这种协议是无状态的协议。也就是说一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪上次的状态。&lt;br&gt;所以为了解决以上问题，W3C组织提出了Cookie(甜饼)。&lt;/p&gt;
&lt;p&gt;由于HTTP是一种无状态的协议，服务器单从网络连接上是无法知道客户身份。那如何解决呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理&lt;/p&gt;
&lt;p&gt;Cookie本质上是&lt;code&gt;一小段的文本信息&lt;/code&gt;，当客户端请求服务器的时候，如果服务器需要记录客户端状态，就会向客户端颁发一个Cookie。客户端会把Cookie保存起来，当客户端再次请求的时候，把网址以及保存下来的Cookie一同提交服务器，这样服务器就可以辨认用户的状态。&lt;/p&gt;
&lt;h4 id=&quot;iOS中网络请求中的Cookie&quot;&gt;&lt;a href=&quot;#iOS中网络请求中的Cookie&quot; class=&quot;headerlink&quot; title=&quot;iOS中网络请求中的Cookie&quot;&gt;&lt;/a&gt;iOS中网络请求中的Cookie&lt;/h4&gt;&lt;p&gt;iOS中的网络请求对于Cookie的支持是非常强大的，当你访问一个网站的时候，NSURLRequest都会帮你记录访问站点的Cookie，而且当你下次访问这个网站的时候，NSURLRequest会带着上次保存下来的Cookie继续请求。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求一个网址，即可分配到cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; request: &lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(string: &lt;span class=&quot;string&quot;&gt;&quot;http://www.tongxingpay.com&quot;&lt;/span&gt;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sessionConfig: &lt;span class=&quot;type&quot;&gt;NSURLSessionConfiguration&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NSURLSessionConfiguration&lt;/span&gt;.defaultSessionConfiguration()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; session: &lt;span class=&quot;type&quot;&gt;NSURLSession&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NSURLSession&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(configuration: sessionConfig)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; task: &lt;span class=&quot;type&quot;&gt;NSURLSessionDataTask&lt;/span&gt; = session.dataTaskWithRequest(request) &amp;#123; (data, response, error) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// 打印 cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSHTTPCookieStorage&lt;/span&gt;.sharedHTTPCookieStorage().cookies)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      task.resume()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;许多网站登录了一次之后，下次就不需要再次登录。这种操作很常见，然而网页与程序的逻辑是完全的不同，也就是说网页并不像程序那样拥有自己的存储路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web端基本都是使用HTTP/HTTPS协议传输数据的。这种协
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Typora</title>
    <link href="http://yoursite.com/2016/04/29/Typora/"/>
    <id>http://yoursite.com/2016/04/29/Typora/</id>
    <published>2016-04-29T05:17:56.000Z</published>
    <updated>2016-04-29T05:42:54.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typora.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Typora&lt;/a&gt;是一款非常方便的Markdown文档编辑器，相对于Mou来说，它的强大之处在于它的及时渲染, 将【写字】与【预览】这两件事情合并了。What You See Is What You Get.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h4&gt;&lt;p&gt;添加表格，只需Command+T即可。表格里面的文本对齐方式类似于office一样方便设置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标题一&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标题二&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;标题三&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;左对齐&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;右对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;Typora 里代码和数学公式的输入，也做得一样出色。当插入代码区域时，你可以先选择代码的种类，Typora 基本支持了所有主流的代码高亮（C#、PHP、Java 等等），连 Swift 也不在例外。而数学公式更加，Typora 甚至连 Latex 都支持了。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; custom: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;友谊的小船说翻就翻&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;照片&quot;&gt;&lt;a href=&quot;#照片&quot; class=&quot;headerlink&quot; title=&quot;照片&quot;&gt;&lt;/a&gt;照片&lt;/h4&gt;&lt;p&gt;对于图片可以直接进行拖拽，方便快捷。下面这个就是一张图片。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://7xoz39.com1.z0.glb.clouddn.com/zzTyporazhaopian.png&quot; alt=&quot;Typorazhaopian&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typora.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Typora&lt;/a&gt;是一款非常方便的Markdown文档编辑器，相对于Mou来说，它的强大之处在于它的及时渲染, 将【写字】
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift代码片段：颜色值</title>
    <link href="http://yoursite.com/2016/04/28/Swift%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%EF%BC%9A%E9%A2%9C%E8%89%B2%E5%80%BC/"/>
    <id>http://yoursite.com/2016/04/28/Swift代码片段：颜色值/</id>
    <published>2016-04-28T03:36:40.000Z</published>
    <updated>2016-04-28T03:48:30.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;利用延展，为UIColor添加颜色值的初始化方法，遍历构造器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;extension UIColor {
        // 三色值
      convenience init(red: Int, green: Int, blue: Int) {
        assert(red &amp;gt;= 0 &amp;amp;&amp;amp; red &amp;lt;= 255, &amp;quot;Invalid red component&amp;quot;)
        assert(green &amp;gt;= 0 &amp;amp;&amp;amp; green &amp;lt;= 255, &amp;quot;Invalid green component&amp;quot;)
        assert(blue &amp;gt;= 0 &amp;amp;&amp;amp; blue &amp;lt;= 255, &amp;quot;Invalid blue component&amp;quot;)
        self.init(red: CGFloat(red) / 255.0, green: CGFloat(green) / 255.0, blue: CGFloat(blue) / 255.0, alpha: 1.0)
      }

      // 颜色值  0x6fd66b
      convenience init(netHex:Int) {
        self.init(red:(netHex &amp;gt;&amp;gt; 16) &amp;amp; 0xff, green:(netHex &amp;gt;&amp;gt; 8) &amp;amp; 0xff, blue:netHex &amp;amp; 0xff)
      }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;利用延展，为UIColor添加颜色值的初始化方法，遍历构造器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;extension UIColor {
        // 三色值
      convenience init(red: 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift代码片段：GCD创建单例</title>
    <link href="http://yoursite.com/2016/04/28/Swift%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%EF%BC%9A%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/04/28/Swift代码片段：单例/</id>
    <published>2016-04-28T03:14:32.000Z</published>
    <updated>2016-04-28T03:19:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Swift中利用GCD创建单例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class var sharedInstance: QRMakeVC {
    struct Static {
        static var onceToken: dispatch_once_t = 0
        static var instance: QRMakeVC? = nil
    }
    dispatch_once(&amp;amp;Static.onceToken) {
        Static.instance = QRMakeVC()
    }
    return Static.instance!
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Swift中利用GCD创建单例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class var sharedInstance: QRMakeVC {
    struct Static {
        static var onc
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MQTT应用内消息推送</title>
    <link href="http://yoursite.com/2016/04/11/MQTT%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2016/04/11/MQTT消息推送/</id>
    <published>2016-04-11T06:35:30.000Z</published>
    <updated>2016-04-28T03:49:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;因为需求，需要从服务器获取支付结果的通知，而后台已经在POS和安卓端使用MTQQ,没办法iOS端消息推送也只能用MTQQ，查询了一些资料发现MTQQ好像要比信鸽、极光的应用内消息更加简单点，至少iOS端少去了推送证书的配置等一些繁琐的流程。MQTT本质上就是一个TCP长连接而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jmesnil/MQTTKit.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MQTTKit&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/cerastes/article/details/36904893?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DEMO_1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/MTQQ-.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DEMO_2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始化MQTT&quot;&gt;&lt;a href=&quot;#初始化MQTT&quot; class=&quot;headerlink&quot; title=&quot;初始化MQTT&quot;&gt;&lt;/a&gt;初始化MQTT&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// 获取设备uuid
if Keychain.load(&amp;quot;kUUID&amp;quot;) == nil {
        let uuidRef: CFUUIDRef = CFUUIDCreate(kCFAllocatorDefault)
        Keychain.save(&amp;quot;kUUID&amp;quot;, data: CFUUIDCreateString(kCFAllocatorDefault, uuidRef))
}
let uuid: String = Keychain.load(&amp;quot;kUUID&amp;quot;) as! String

// clientId:用来区分接受消息的设备，此处我用的是设备的UUID,并保存在了钥匙串里，确保唯一性。
mqtt = MQTTSession.init(clientId: uuid, userName: &amp;quot;name&amp;quot;, password: &amp;quot;psw&amp;quot;)
mqtt?.connectToHost(&amp;quot;111.111.111.111&amp;quot;, port: 1111)
mqtt?.setDelegate(self)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;消息回调&quot;&gt;&lt;a href=&quot;#消息回调&quot; class=&quot;headerlink&quot; title=&quot;消息回调&quot;&gt;&lt;/a&gt;消息回调&lt;/h3&gt;&lt;h4 id=&quot;链接状态回调&quot;&gt;&lt;a href=&quot;#链接状态回调&quot; class=&quot;headerlink&quot; title=&quot;链接状态回调&quot;&gt;&lt;/a&gt;链接状态回调&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;   // 链接状态回调
   override func session(session: MQTTSession!, handleEvent eventCode: MQTTSessionEvent) {

    switch eventCode {
    case MQTTSessionEventConnected:
        print(&amp;quot;消息推送: connected&amp;quot;)
        // 链接成功后，订阅主题
        self.mqtt?.subscribeTopic(&amp;quot;TX_APP_PAY&amp;quot;)
    case MQTTSessionEventConnectionRefused:
        print(&amp;quot;消息推送: connection refused&amp;quot;)
    case MQTTSessionEventConnectionClosed:
        print(&amp;quot;消息推送: connection closed&amp;quot;)
    case MQTTSessionEventConnectionError:
        print(&amp;quot;消息推送: connection error&amp;quot;)
        print(&amp;quot;         reconnecting...&amp;quot;)

        // 链接错误的话，尝试重新链接
        self.mqtt?.connectToHost(&amp;quot;111.111.111.111&amp;quot;, port: 1111)
    case MQTTSessionEventProtocolError:
        print(&amp;quot;消息推送: protocol error&amp;quot;)
    default:
        break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;接收到消息回调&quot;&gt;&lt;a href=&quot;#接收到消息回调&quot; class=&quot;headerlink&quot; title=&quot;接收到消息回调&quot;&gt;&lt;/a&gt;接收到消息回调&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    // 接收到消息回调
    override func session(session: MQTTSession!, newMessage data: NSData!, onTopic topic: String!) {

    var dic = NSDictionary()
    do {
        dic =
            try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers) as! NSDictionary
    } catch {

    }
    print(&amp;quot;推送内容：&amp;quot;, dic)
    print(&amp;quot;推送主题：&amp;quot;, topic)
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为需求，需要从服务器获取支付结果的通知，而后台已经在POS和安卓端使用MTQQ,没办法iOS端消息推送也只能用MTQQ，查询了一些资料发现MTQQ好像要比信鸽、极光的应用内消息更加简单点，至少iOS端少去了推送证书的配置等一些繁琐的流程。MQTT
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GCD_API_Main/Global_Dispatch_Queue</title>
    <link href="http://yoursite.com/2016/04/04/GCD-API-Main-Global-Dispatch-Queue/"/>
    <id>http://yoursite.com/2016/04/04/GCD-API-Main-Global-Dispatch-Queue/</id>
    <published>2016-04-04T03:21:17.000Z</published>
    <updated>2016-04-04T04:17:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;获取系统标准提供的Dispatch Queue: Main Dispatch Queue 和 Global Dispatch Queue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Main-Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Main-Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;Main Dispatch Queue&quot;&gt;&lt;/a&gt;Main Dispatch Queue&lt;/h3&gt;&lt;p&gt;Main Dispatch Queue 正如其名称中含有的‘main’一样，是在主线程中执行Dispatch Queue。因为主线程只有一个，所以Main Dispatch Queue 自然就是 &lt;code&gt;Serial Dispatch Queue&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;追加到 Main Dispatch Queue 的处理在主线程的&lt;code&gt;RunLoop&lt;/code&gt;中执行。由于在主线程中执行，因此要将用户界面的界面更新等一些必须在主线程中执行的处理追加到 Main Dispatch Queue 使用。&lt;/p&gt;
&lt;h3 id=&quot;Global-Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Global-Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;Global Dispatch Queue&quot;&gt;&lt;/a&gt;Global Dispatch Queue&lt;/h3&gt;&lt;p&gt;Global Dispatch Queue 是所有的应用程序都能够使用的 &lt;code&gt;Concurrent Dispatch Queue&lt;/code&gt;。 没有必要通过 dispatch_queue_create 函数逐个生成 Concurrent Dispatch Queue。 只要获取 Global Dispatch Queue 使用就行。&lt;/p&gt;
&lt;h3 id=&quot;获取方法&quot;&gt;&lt;a href=&quot;#获取方法&quot; class=&quot;headerlink&quot; title=&quot;获取方法&quot;&gt;&lt;/a&gt;获取方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// 获取 Main Dispatch Queue
let mainDispatchQueue: dispatch_queue_t = dispatch_get_main_queue()

// 获取 Global Dispatch Queue(高优先级)
let globalDispatchQueueHigh: dispatch_queue_t = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0)

// 获取 Global Dispatch Queue(默认优先级)
let globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)

// 获取 Global Dispatch Queue(低优先级)
let globalDispatchQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0)

// 获取 Global Dispatch Queue(后台优先级)
let globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;常用例子&quot;&gt;&lt;a href=&quot;#常用例子&quot; class=&quot;headerlink&quot; title=&quot;常用例子&quot;&gt;&lt;/a&gt;常用例子&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// 在默认优先级 Global Dispatch Queue 中执行 Block
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) { 

    // 可以并行执行的处理（如： 图片下载）

    // 在 Main Dispatch Queue 中执行的 Block
    dispatch_async(dispatch_get_main_queue(), { 

        // 只能在主线程中执行的处理（如：将缓存在本地的图片呈现在界面中）

    })
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;获取系统标准提供的Dispatch Queue: Main Dispatch Queue 和 Global Dispatch Queue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Main-Dispatch-Queue&quot;&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GCD_API_DispatchQueue</title>
    <link href="http://yoursite.com/2016/03/31/CGD-API-DispatchQueue/"/>
    <id>http://yoursite.com/2016/03/31/CGD-API-DispatchQueue/</id>
    <published>2016-03-31T10:35:06.000Z</published>
    <updated>2016-04-04T03:58:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;关于 Dispatch Queue 和 Dispatch_queue_create 的介绍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;Dispatch Queue&quot;&gt;&lt;/a&gt;Dispatch Queue&lt;/h3&gt;&lt;p&gt;Dispatch Queue,字面意思就是执行处理的等待队列。将想要执行的任务，通过dispatch_async函数“追加”赋值在变量queue的“Dispatch Queue”中。放在dispatch_async函数的block里面的任务就可以在另个一线程中执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dispatch_async(queue) { 
        // 想要执行的任务
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dispatch Queue 按照追加的顺序（先进先出FIFO）执行处理。&lt;/p&gt;
&lt;p&gt;Dispatch Queue 分为两种：Serial Dispatch Queue 和 Concurrent Dispatch Queue。&lt;/p&gt;
&lt;h4 id=&quot;Serial-Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Serial-Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;Serial Dispatch Queue&quot;&gt;&lt;/a&gt;Serial Dispatch Queue&lt;/h4&gt;&lt;p&gt;Serial Dispatch Queue 等待处理结束。简单的理解，比方说，Dispatch Queue中有多个任务，那么这几个任务只能使用同一个线程，按照这几个任务添加的顺序，逐个处理。&lt;/p&gt;
&lt;p&gt;优点：可以有效的避免数据多线程产生的数据竞争问题。因为一个Serial Dispatch Queue只能有一个线程。当然，如果你创建3000个这样的queue,就又会绕到多线程消耗大量内存的问题上来，会大幅度降低系统的响应性能。过犹不及。因此，Serial Dispatch Queue的生成个数应当仅限所必须的数量。&lt;/p&gt;
&lt;h4 id=&quot;Concurrent-Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Concurrent-Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;Concurrent Dispatch Queue&quot;&gt;&lt;/a&gt;Concurrent Dispatch Queue&lt;/h4&gt;&lt;p&gt;Concurrent Dispatch Queue 不等待处理。当在这种Dispatch Queue中有多个任务时，会有多个线程来处理这些任务。比方说，有3个线程A、B、C, 5个先后添加的任务a.b.c.d.e, 那么线程A就会处理任务a, 同时B处理b, C处理c; 如果线程B优先其他线程把任务处理完了，那么线程B就会去处理任务d; 下一个空余出来的线程就会去处理任务e, 直至任务都处理完成。&lt;/p&gt;
&lt;h3 id=&quot;Dispatch-queue-create&quot;&gt;&lt;a href=&quot;#Dispatch-queue-create&quot; class=&quot;headerlink&quot; title=&quot;Dispatch_queue_create&quot;&gt;&lt;/a&gt;Dispatch_queue_create&lt;/h3&gt;&lt;p&gt;创建一个Dispatch_queue时会使用用到函数Dispatch_queue_create。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建一个Serial Dispatch Queue
    let mySerialQueue: dispatch_queue_t = dispatch_queue_create(&amp;quot;com.SerialDispatchQueue&amp;quot;, nil)

// 创建一个Concurrent Dispatch Queue
    let myConcurrentQueue: dispatch_queue_t = dispatch_queue_create(&amp;quot;com.SerialDispatchQueue&amp;quot;, DISPATCH_QUEUE_CONCURRENT)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上是创建这两种dispatch_queue的方法，区别在于第二个参数的设定，第一个参数是dispatch_queue的署名。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于 Dispatch Queue 和 Dispatch_queue_create 的介绍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Dispatch-Queue&quot;&gt;&lt;a href=&quot;#Dispatch-Queue&quot; class=&quot;he
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GCD</title>
    <link href="http://yoursite.com/2016/03/30/GCD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/30/GCD学习笔记/</id>
    <published>2016-03-30T13:06:18.000Z</published>
    <updated>2016-03-31T11:23:18.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;时间总是匆匆而过，上篇学习笔记还在月初，这篇就已经到月末了，感觉对自己太溺爱了。还是看看书，写点笔记，督促自己不断学习吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是GCD&quot;&gt;&lt;a href=&quot;#什么是GCD&quot; class=&quot;headerlink&quot; title=&quot;什么是GCD&quot;&gt;&lt;/a&gt;什么是GCD&lt;/h3&gt;&lt;p&gt;Grand Central Dispath(GCD),就是异步执行任务的一种技术。简单地说就是GCD提供了极为简单的方法，实现了极为复杂繁琐的多线程编程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 自定义一个线程
let queue: dispatch_queue_t = dispatch_queue_create(&amp;quot;myqueue&amp;quot;, nil)

// 耗时的任务放到后台处理
dispatch_async(queue) {
    var num = Int()
    for i in 1...900 {
        num += i
    }

    // 在主线程中打印求和结果
    dispatch_async(dispatch_get_main_queue(), { 
        print(num)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就是一个很简单地GCD应用，开辟新的线程用来处理耗时的任务，在主线程中处理必要操作，比如UI的展示，网络请求结果的处理等。&lt;/p&gt;
&lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;p&gt;多线程说白了，就像工厂里面的流水线，每条流水线都有各自的任务，流水线之间原则上没有太大的相关性。&lt;/p&gt;
&lt;p&gt;使用多线程的程序可以在某个线程和其他线程之间反复多次进行上下文切换，看上去就像一个CPU核能够并列的执行多个线程一样。当然，多个CPU核的情况下，是真的提供了多个CPU核并列执行多个线程的技术。&lt;/p&gt;
&lt;h4 id=&quot;多线程的优点：&quot;&gt;&lt;a href=&quot;#多线程的优点：&quot; class=&quot;headerlink&quot; title=&quot;多线程的优点：&quot;&gt;&lt;/a&gt;多线程的优点：&lt;/h4&gt;&lt;p&gt;1、数据竞争（多个线程更新相同的资源会导致数据的不一致）；&lt;br&gt;2、死锁(停止等待事件的线程会导致多个线程相互持续等待)；&lt;br&gt;3、使用太多线程会消耗大量内存等。 &lt;/p&gt;
&lt;h4 id=&quot;多线程的优点：-1&quot;&gt;&lt;a href=&quot;#多线程的优点：-1&quot; class=&quot;headerlink&quot; title=&quot;多线程的优点：&quot;&gt;&lt;/a&gt;多线程的优点：&lt;/h4&gt;&lt;p&gt;使用多线程编程，在执行长时间的处理是仍可保证用户界面的响应性能。比如：程序启动的时候，最先执行的是主线程，用来描绘用户界面、处理触摸屏幕的事件等；而其他耗时操作，如数据请求、图片下载等则是开辟新的线程进行处理。这样可以避免妨碍主线程中NSRunLoop的执行，从而保证用户界面的响应性能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时间总是匆匆而过，上篇学习笔记还在月初，这篇就已经到月末了，感觉对自己太溺爱了。还是看看书，写点笔记，督促自己不断学习吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是GCD&quot;&gt;&lt;a href=&quot;#什么是GCD&quot; class=&quot;hea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URL中特殊字符的转义</title>
    <link href="http://yoursite.com/2016/03/30/URL%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/30/URL中特殊字符的处理/</id>
    <published>2016-03-30T03:40:38.000Z</published>
    <updated>2016-03-30T03:20:57.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在做RSA签名和加密的过程中，由于RSA生成的字段中含有 + ,需要进行转义，思路很简单，但总有坑要跳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// 对URL进行转义
- (NSString *)formatURLwithText:(NSString *)text {
    return (NSString *)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(NULL, (CFStringRef)text, NULL, (CFStringRef)@&amp;quot;!*’();:@&amp;amp;=+$,/?%#[]&amp;quot;, kCFStringEncodingUTF8));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码是就是最近本的处理方法，关键在用的时机。&lt;/p&gt;
&lt;p&gt;生成sign值：通常的做法是对所有参数按key排序，然后拼接成a=x&amp;amp;b=y…这样的字符串，然后RSA一下。但是如果encode一下，iOS端和安卓端出现不同的结果，那么服务端拿到以后是可以得到原串的，但是服务端encode一下所得到的结果会不一样，那么校验sign就会失败。&lt;/p&gt;
&lt;p&gt;但是，如果不对每个value进行转码，在服务端就无法通过&amp;amp;来分割了，因为value中有&amp;amp;时，若不转码就会出问题，因此encode是必须的。&lt;/p&gt;
&lt;p&gt;解决方法：生成sign时，是遍历所有的key-value，然后拼接，最后RSA。那么，生成sign时，我们只要不对value进行encode，而其他上传的参数值都encode，这样就可以解决我们的问题了。&lt;/p&gt;
&lt;p&gt;注意点：转义之后的URL不可再用encode；例如，value里面含有中文字段，正常情况下是要进行中文编码的，如果调用转义的方法后，就不需要在进行中文编码的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在做RSA签名和加密的过程中，由于RSA生成的字段中含有 + ,需要进行转义，思路很简单，但总有坑要跳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高阶函数：map、flatMap、forEach、filter、reduce</title>
    <link href="http://yoursite.com/2016/03/15/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%9Amap%E3%80%81flatMap%E3%80%81forEach%E3%80%81filter%E3%80%81reduce/"/>
    <id>http://yoursite.com/2016/03/15/高阶函数：map、flatMap、forEach、filter、reduce/</id>
    <published>2016-03-15T03:40:38.000Z</published>
    <updated>2016-03-15T07:08:33.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;高阶函数：函数作为参数或者函数作为返回值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;函数的写法：&quot;&gt;&lt;a href=&quot;#函数的写法：&quot; class=&quot;headerlink&quot; title=&quot;函数的写法：&quot;&gt;&lt;/a&gt;函数的写法：&lt;/h3&gt;&lt;h4 id=&quot;1-正常写法&quot;&gt;&lt;a href=&quot;#1-正常写法&quot; class=&quot;headerlink&quot; title=&quot;1.正常写法&quot;&gt;&lt;/a&gt;1.正常写法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;let res = numbers.sort({$0 &amp;lt; $1})
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-Trailing-Closure&quot;&gt;&lt;a href=&quot;#2-Trailing-Closure&quot; class=&quot;headerlink&quot; title=&quot;2.Trailing Closure&quot;&gt;&lt;/a&gt;2.Trailing Closure&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;let ree = numbers.sort{$0 &amp;lt; $1}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;常用实例&quot;&gt;&lt;a href=&quot;#常用实例&quot; class=&quot;headerlink&quot; title=&quot;常用实例&quot;&gt;&lt;/a&gt;常用实例&lt;/h3&gt;&lt;h4 id=&quot;map函数：&quot;&gt;&lt;a href=&quot;#map函数：&quot; class=&quot;headerlink&quot; title=&quot;map函数：&quot;&gt;&lt;/a&gt;map函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;map函数：当数组调用map函数时，闭包作为它的参数，闭包实现对数组单个元素进行某种规则的处理，最终map函数返回一个原数组元素被闭包处理过的新的数组（新的数组元素个数和原先的相等，数组类型可自定义，如数组类型由[Int],变为[String] 或者 [Bool]等）。

let arr = [1, 2, 9, 4, 5]
// 写法一：推荐写法
let mrr1 = arr.map {
    &amp;quot;step.&amp;quot; + String($0)
}
// 写法二：
let mrr2 = arr.map { (a: Int) -&amp;gt; String in
    &amp;quot;step.&amp;quot; + String(a)
}
// 写法三：
let mrr3 = arr.map ({ (a: Int) -&amp;gt; String in
    &amp;quot;step.&amp;quot; + String(a)
})
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;flatMap函数：&quot;&gt;&lt;a href=&quot;#flatMap函数：&quot; class=&quot;headerlink&quot; title=&quot;flatMap函数：&quot;&gt;&lt;/a&gt;flatMap函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;flatMap函数：功能和map函数基本相同，不同之处在于，flatMap生成的数组自动去除nil。

// 1、去除nil
let frr = [&amp;quot;af&amp;quot;, &amp;quot;vf&amp;quot;, &amp;quot;&amp;quot;]
let frr1 = frr.flatMap { (a: String) -&amp;gt; Int? in
    if a.characters.count == 0 {
            return nil
    } else {
        return a.characters.count
    }
}   // [2,2]

// 2、对嵌套数组的拆分合并
let fmp = [[2, 6, 4], [5, 3, 7]]
let fmp1 = fmp.flatMap { (a: [Int]) -&amp;gt; [Int] in
    a
}   // [2, 6, 4, 5, 3, 7]

let fmp2 = fmp.map { (a: [Int]) -&amp;gt; [Int] in
    a
}   // [[2, 6, 4], [5, 3, 7]]

// 3、对不同类型数组的合并
let c = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
let i = [1, 2]
let fmp3 = i.flatMap { car in
    c.map { num in
        num + &amp;quot;\(car)&amp;quot;
    }
}   // [&amp;quot;a1&amp;quot;, &amp;quot;b1&amp;quot;, &amp;quot;c1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;c2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;filter函数：&quot;&gt;&lt;a href=&quot;#filter函数：&quot; class=&quot;headerlink&quot; title=&quot;filter函数：&quot;&gt;&lt;/a&gt;filter函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;let err = arr.filter { (a: Int) -&amp;gt; Bool in
    a % 2 == 0
}   // [2, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;forEach函数：&quot;&gt;&lt;a href=&quot;#forEach函数：&quot; class=&quot;headerlink&quot; title=&quot;forEach函数：&quot;&gt;&lt;/a&gt;forEach函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;arr.forEach { (a: Int) -&amp;gt; () in
    print(a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;reduce函数：&quot;&gt;&lt;a href=&quot;#reduce函数：&quot; class=&quot;headerlink&quot; title=&quot;reduce函数：&quot;&gt;&lt;/a&gt;reduce函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;reduce函数：把数组元素合并成一个新的值, 新值类型不固定。有两个参数，第一个参数是返回值的初始值；第二个参数是一个处理数组元素的函数。

// 返回Int
let crr = arr.reduce(0) { (prevSum: Int, elemen: Int) in
    return prevSum + elemen

}
// 返回String
let crr2 = arr.reduce(&amp;quot;&amp;quot;) {
      &amp;quot;\($0)&amp;quot; + &amp;quot;\($1)&amp;quot;
}

// 实现map和filter
extension Array {
    func mMap&amp;lt;U&amp;gt; (transform: Element -&amp;gt; U) -&amp;gt; [U] {
    return reduce([], combine: { $0 + [transform($1)] })
    }
    func mFilter (includeElement: Element -&amp;gt; Bool) -&amp;gt; [Element] {
        return reduce([]) { includeElement($1) ? $0 + [$1] : $0 }
    }
}

// 利用 reduce 实现 map
let ass = arr.reduce([]) { (a: [Int], element: Int) -&amp;gt;[Int] in
    var t = Array(a)
    t.append(element * 2)
    return t
}

// 利用 reduce 方法一次求出数组中奇数的和、以及偶数乘积
let sss:(Int, Int) = arr.reduce((0, 1)) {
    (a: (Int, Int), element: Int) -&amp;gt; (Int, Int) in
    if element % 2 == 0 {
        return (a.0, a.1 * element)
    } else {
        return (a.0 + element, a.1)
    }
}

// 利用 reduce 方法一次求出数组中偶数的平方和
let kkk = arr.filter {
        $0 % 2 == 0
    }.map {
        $0 * $0
    }.reduce(0){
        $0 + $1
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;高阶函数：函数作为参数或者函数作为返回值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;函数的写法：&quot;&gt;&lt;a href=&quot;#函数的写法：&quot; class=&quot;headerlink&quot; title=&quot;函数的写法：&quot;&gt;&lt;/a&gt;函数的写法：&lt;/h3&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSURLSession_Swift</title>
    <link href="http://yoursite.com/2016/03/09/NSURLSession-Swift/"/>
    <id>http://yoursite.com/2016/03/09/NSURLSession-Swift/</id>
    <published>2016-03-09T06:46:51.000Z</published>
    <updated>2016-03-15T07:12:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;一个简单地Swift语言的网络请求封装，包括数据请求、数据上传、图片下载、图片上传。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/NSURLSession_Swift.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据请求&quot;&gt;&lt;a href=&quot;#数据请求&quot; class=&quot;headerlink&quot; title=&quot;数据请求&quot;&gt;&lt;/a&gt;数据请求&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;/**
 数据请求

 - parameter urlStr:  请求地址
 - parameter reponse: 请求结果
 */
func get(urlStr: String, reponse: (result: AnyObject, response: NSURLResponse)-&amp;gt;Void)-&amp;gt;Void  {

    if urlStr.isEmpty {
        print(&amp;quot;Request address cannot be empty&amp;quot;)
        return
    }
    let strEncode: String = urlStr.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!
    let url: NSURL = NSURL.init(string: strEncode)!
    let request: NSMutableURLRequest = NSMutableURLRequest.init(URL: url)

    let session: NSURLSession = NSURLSession.init(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())
    let task: NSURLSessionDataTask = session.dataTaskWithRequest(request) { (data, resp, err) -&amp;gt; Void in
        if (err != nil) {
            print(&amp;quot;Data request failed: \(err?.code)&amp;quot;)
            return
        }
        do {
            let json =
            try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.MutableContainers)
            reponse(result: json, response: resp!)

        } catch {
        }
    }
    task.resume()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;数据下载&quot;&gt;&lt;a href=&quot;#数据下载&quot; class=&quot;headerlink&quot; title=&quot;数据下载&quot;&gt;&lt;/a&gt;数据下载&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;/**
 数据下载

 - parameter urlStr:  请求地址
 - parameter reponse: 数据本地保存地址
 */
func downLoad(urlStr: String, reponse:(location: String)-&amp;gt;Void)-&amp;gt;Void {
    if urlStr.isEmpty {
        print(&amp;quot;Request address cannot be empty&amp;quot;)
        return
    }
    let strEncode: String = urlStr.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!
    let url: NSURL = NSURL.init(string: strEncode)!
    let request: NSMutableURLRequest = NSMutableURLRequest.init(URL: url)
    let session: NSURLSession = NSURLSession.init(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())
    let downLoadTask: NSURLSessionDownloadTask = session.downloadTaskWithRequest(request) { (location, resp, err) -&amp;gt; Void in
        if (err != nil) {
            print(&amp;quot;DownLoadData request failed: \(err?.code)&amp;quot;)
            return
        }
        let caches: String = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory, NSSearchPathDomainMask.UserDomainMask, true).last!

        let file: String = caches.stringByAppendingString(&amp;quot;/\(resp!.suggestedFilename!)&amp;quot;)

        if NSFileManager.defaultManager().fileExistsAtPath(file) {
            if NSThread.isMainThread() {
                reponse(location: file)
            } else {
                dispatch_async(dispatch_get_main_queue(), { () -&amp;gt; Void in
                    reponse(location: file)
                })
            }
        } else {
            do {
                try NSFileManager.defaultManager().moveItemAtPath(location!.path!, toPath: file)
                if NSThread.isMainThread() {
                    reponse(location: file)
                } else {
                    dispatch_async(dispatch_get_main_queue(), { () -&amp;gt; Void in
                        reponse(location: file)
                    })
                }
            } catch {

            }
        }
    }
    downLoadTask.resume()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;JSON数据上传&quot;&gt;&lt;a href=&quot;#JSON数据上传&quot; class=&quot;headerlink&quot; title=&quot;JSON数据上传&quot;&gt;&lt;/a&gt;JSON数据上传&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;/**
 普通数据上传

 - parameter urlStr:     上传地址
 - parameter uploadData: 字典数据
 - parameter reponse:    上传结果
 */
func upLoadData(urlStr: String, uploadData: AnyObject, reponse: (result: AnyObject, response: NSURLResponse)-&amp;gt;Void)-&amp;gt;Void {
    if urlStr.isEmpty {
        print(&amp;quot;Request address cannot be empty&amp;quot;)
        return
    }

    let strEncode: String = urlStr.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!
    let url: NSURL = NSURL.init(string: strEncode)!
    let request: NSMutableURLRequest = NSMutableURLRequest.init(URL: url)

    request.addValue(&amp;quot;application/json&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;)
    request.addValue(&amp;quot;application/json&amp;quot;, forHTTPHeaderField: &amp;quot;Accept&amp;quot;)

    request.HTTPMethod = &amp;quot;POST&amp;quot;
    request.cachePolicy = NSURLRequestCachePolicy.ReloadIgnoringCacheData
    request.timeoutInterval = 20
    do {
        let data: NSData =
        try NSJSONSerialization.dataWithJSONObject(uploadData, options: NSJSONWritingOptions.PrettyPrinted)
        let session: NSURLSession = NSURLSession.init(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())
        let uploadTask: NSURLSessionUploadTask = session.uploadTaskWithRequest(request, fromData: data, completionHandler: { (result, resp, err) -&amp;gt; Void in
            if (err != nil) {
                print(&amp;quot;UpLoadData request failed: \(err?.code)&amp;quot;)
                return
            }

            do {
                let json: AnyObject =
                try NSJSONSerialization.JSONObjectWithData(result!, options: NSJSONReadingOptions.MutableContainers)
                reponse(result: json, response: resp!)
            } catch {

            }

        })
        uploadTask.resume()
    } catch {

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;图片上传&quot;&gt;&lt;a href=&quot;#图片上传&quot; class=&quot;headerlink&quot; title=&quot;图片上传&quot;&gt;&lt;/a&gt;图片上传&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; /**
 图片上传

 - parameter urlStr:     上传地址
 - parameter uploadData: 图片数据
 - parameter dataType:   图片类型
 - parameter reponse:    上传结果
 */
func upLoadImage(urlStr: String, image: UIImage, dataType: DataType, reponse: (result: String, response: NSURLResponse)-&amp;gt;Void)-&amp;gt;Void {
    if urlStr.isEmpty {
        print(&amp;quot;Request address cannot be empty&amp;quot;)
        return
    }

    let strEncode: String = urlStr.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!
    let url: NSURL = NSURL.init(string: strEncode)!
    let request: NSMutableURLRequest = NSMutableURLRequest.init(URL: url)
    var daa = NSData()
    switch dataType {
    case .JPEG:
        request.addValue(&amp;quot;image/jpeg&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;)
        request.addValue(&amp;quot;text/html&amp;quot;, forHTTPHeaderField: &amp;quot;Accept&amp;quot;)
        daa = UIImageJPEGRepresentation(image, 1)!
    case .PNG:
        request.addValue(&amp;quot;image/png&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;)
        request.addValue(&amp;quot;text/html&amp;quot;, forHTTPHeaderField: &amp;quot;Accept&amp;quot;)
        daa = UIImagePNGRepresentation(image)!
    }

    request.HTTPMethod = &amp;quot;POST&amp;quot;
    request.cachePolicy = NSURLRequestCachePolicy.ReloadIgnoringCacheData
    request.timeoutInterval = 20
    let session: NSURLSession = NSURLSession.init(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())

    let uploadTask: NSURLSessionUploadTask = session.uploadTaskWithRequest(request, fromData: daa, completionHandler: { (result, resp, err) -&amp;gt; Void in

        if (err != nil) {
            print(&amp;quot;UpLoadImage request failed: \(err?.code)&amp;quot;)
            return
        }
        let ss: String = String.init(data: result!, encoding: NSUTF8StringEncoding)!
        reponse(result: ss, response: resp!)
    })
    uploadTask.resume()
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个简单地Swift语言的网络请求封装，包括数据请求、数据上传、图片下载、图片上传。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/NSURLSession_Swift.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fabric-Crashlytics</title>
    <link href="http://yoursite.com/2016/03/03/Fabric-Crashlytics/"/>
    <id>http://yoursite.com/2016/03/03/Fabric-Crashlytics/</id>
    <published>2016-03-03T02:59:15.000Z</published>
    <updated>2016-03-15T07:12:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Fabric是Twitter公司提供的一款，应用于移动应用开发，统计应用崩溃信息的工具。操作简单，使用方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用介绍&quot;&gt;&lt;a href=&quot;#使用介绍&quot; class=&quot;headerlink&quot; title=&quot;使用介绍&quot;&gt;&lt;/a&gt;使用介绍&lt;/h3&gt;&lt;h4 id=&quot;申请账号&quot;&gt;&lt;a href=&quot;#申请账号&quot; class=&quot;headerlink&quot; title=&quot;申请账号&quot;&gt;&lt;/a&gt;申请账号&lt;/h4&gt;&lt;p&gt;Crashlytics的服务是免费提供的，但是并不能直接注册使用，需要先申请，打开 &lt;a href=&quot;http://try.crashlytics.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crashlytic的官网&lt;/a&gt; ，输入自己的邮箱申请使用。之后Fabric会发一封确认邮件，确认成功之后，还会发一封Welcome to Fabric的邮件，点击Get Started with Fabric，根据提示，现在安装Mac端的App，登陆并根据提示完成配置。&lt;/p&gt;
&lt;h4 id=&quot;设置工程&quot;&gt;&lt;a href=&quot;#设置工程&quot; class=&quot;headerlink&quot; title=&quot;设置工程&quot;&gt;&lt;/a&gt;设置工程&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1、点击&amp;quot;+ New App&amp;quot; 添加工程项目；
2、根据提示配置&amp;quot;Run Script&amp;quot;。打开工程-&amp;gt;Build Phases-&amp;gt;Editor-&amp;gt;Add Build Phase-&amp;gt;Add Run Script Build Phase, 然后将Fabric提供的代码粘贴到Shell下， 然后Command+B;
3、按照提示，将Fabric提供的frameworks(图标)拖到工程里，然后粘贴复制相关代码。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1、可以直接使用Fabric提供的强行Crash代码进行测试，也可以自己写个。
2、测试的时候需要脱离Xcode的调试环境。最简单的方法就是真机测试，但要注意的是，测试的时候手机和Xcode不要用数据线连接。测试之后，会收到Fabric的测试报告，出现Crash的具体位置，十分方便。
3、用户也可以在AppStore中下载Fabric,在手机端查看测试报告。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Fabric是Twitter公司提供的一款，应用于移动应用开发，统计应用崩溃信息的工具。操作简单，使用方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用介绍&quot;&gt;&lt;a href=&quot;#使用介绍&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spotlight</title>
    <link href="http://yoursite.com/2016/02/29/Spotlight/"/>
    <id>http://yoursite.com/2016/02/29/Spotlight/</id>
    <published>2016-02-29T05:17:43.000Z</published>
    <updated>2016-03-15T07:12:00.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;iOS9推出的Core Spotlight(CS)框架，利用CS做应用内搜索。&lt;br&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/CoreSpotlight.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;导入MobileCoreServices.framework和CoreSpotligt.framework
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;主要代码&quot;&gt;&lt;a href=&quot;#主要代码&quot; class=&quot;headerlink&quot; title=&quot;主要代码&quot;&gt;&lt;/a&gt;主要代码&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;// 设置spotlight
- (void)setSpotligtht {
    self.searchItemArr = [NSMutableArray array];
    int i = 0;
    for (NSDictionary *dic in self.dataArr) {

        CSSearchableItemAttributeSet *searchItemSet = [[CSSearchableItemAttributeSet alloc] initWithItemContentType:(NSString *)kUTTypeText];

        // 标题
        searchItemSet.title = [dic objectForKey:@&amp;quot;title&amp;quot;];

        // 描述
        searchItemSet.contentDescription = [dic objectForKey:@&amp;quot;desc&amp;quot;];
        NSArray *arr = [[dic objectForKey:@&amp;quot;picture&amp;quot;] componentsSeparatedByString:@&amp;quot;.&amp;quot;];

        // 设置照片路径
        searchItemSet.thumbnailURL = [[NSBundle mainBundle] URLForResource:arr[0] withExtension:arr[1]];

        // 搜索关键词 keywords(字符串形式) / contactKeywords(数组形式)
        searchItemSet.keywords = [dic objectForKey:@&amp;quot;title&amp;quot;];

        /*
         uniqueIdentifier：这个参数唯一地标识Spotlight当前搜索项。你可以用你喜欢的方式构造这个唯一标示符。
         domainIdentifier:使用这个参数对搜索项进行分组。
         attributeSet：它就是我们刚刚设置属性时的属性设置对象。
         */
        CSSearchableItem *searchItem = [[CSSearchableItem alloc] initWithUniqueIdentifier:[NSString stringWithFormat:@&amp;quot;com.spolight.%d&amp;quot;, i] domainIdentifier:@&amp;quot;books&amp;quot; attributeSet:searchItemSet];
        [self.searchItemArr addObject:searchItem];
        i++;
    }

    [[CSSearchableIndex defaultSearchableIndex] indexSearchableItems:self.searchItemArr completionHandler:^(NSError * _Nullable error) {
        if (error) {
            NSLog(@&amp;quot;%@&amp;quot;, error.localizedDescription);
        }
    }];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS9推出的Core Spotlight(CS)框架，利用CS做应用内搜索。&lt;br&gt;&lt;a href=&quot;https://github.com/zhangzhaopds/CoreSpotlight.git&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
    
  </entry>
  
</feed>
